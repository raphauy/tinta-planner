generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  role          String    @default("client")
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  clientId      Int?
  agency        Agency?   @relation(fields: [agencyId], references: [id], onDelete: Cascade)  
  agencyId      Int?
  clients       Client[]  
}


model Agency {
    id                Int       @id @default(autoincrement())
    name              String
    createdAt         DateTime  @default(now())
    updatedAt         DateTime  @updatedAt
    users             User[]
    clients           Client[]
}

model Client {
    id                Int       @id @default(autoincrement())
    name              String
    description       String?
    slug              String    @unique
    createdAt         DateTime  @default(now())
    updatedAt         DateTime  @updatedAt
    handle_insta      String    @default("")
    image_insta       String    @default("")
    users             User[]
    pilars            Pilar[]
    posts             Post[]
    agency            Agency  @relation(fields: [agencyId], references: [id], onDelete: Cascade)  
    agencyId          Int
    wines             Wine[]
    services          Service[]
    leads             Lead[]
    informes          Informe[]
    reportDefinition  ReportDefinition? @relation(fields: [reportDefinitionId], references: [id], onDelete: Restrict)
    reportDefinitionId String?
    fechasImportantes FechaImportante[]
    brandVoice        String?
    newsletters       Newsletter[]
    contacts          Contact[]
    envios            Envio[]
    emails            Email[]
}

model Pilar {
    id                Int       @id @default(autoincrement())
    name              String
    description       String    @db.Text
    color             String
    client            Client    @relation(fields: [clientId], references: [id], onDelete: Restrict)  
    clientId          Int
    posts             Post[]
}

model Post {
    id                String    @id @default(cuid())
    title             String
    image             String?
    format            String?
    hashtags          String?   @db.Text
    copy              String?   @db.Text
    link              String?
    date              DateTime?
    client            Client    @relation(fields: [clientId], references: [id], onDelete: Restrict)  
    clientId          Int
    pilar             Pilar     @relation(fields: [pilarId], references: [id], onDelete: Restrict)  
    pilarId           Int
    status            String    @default("Draft")
    comments          String?   @db.Text
}



model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String   
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Wine {
  id            String    @id @default(cuid())
  winery        String
  wine          String
  winemaker     String?
  region        String
  vintage       String
  grapes        String
  style         String?
  notes         String?   @db.Text
  price         String?
  image         String?   @default("https://res.cloudinary.com/dtm41dmrz/image/upload/v1688035104/wines/wine-placeholder.jpg")
  client        Client    @relation(fields: [clientId], references: [id], onDelete: Restrict)  
  clientId      Int
  alcohol       String?
}

model Service {
  id            String    @id @default(cuid())
  name          String
  description   String?   @db.Text
  price         Float?
  emoji         String?   @default("üç∑")
  client        Client    @relation(fields: [clientId], references: [id], onDelete: Restrict)  
  clientId      Int
  leads         Lead[]
}

model Lead {
  id            String    @id @default(cuid())
  company       String
  status        String    @default("Potencial")
  priority      String    @default("0")
  value         Float?
  contactName   String?
  contactEmail  String?
  contactPhone  String?
  lastContact   DateTime?
  client        Client    @relation(fields: [clientId], references: [id], onDelete: Restrict)  
  clientId      Int
  service       Service  @relation(fields: [serviceId], references: [id], onDelete: Restrict)
  serviceId     String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  website       String?
  linkedin      String?
  instagram     String?
  twitter       String?
  notes         Note[]
  type          String?
}

model Note {
  id            String    @id @default(cuid())
  title         String    @default("")
  text          String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lead          Lead    @relation(fields: [leadId], references: [id], onDelete: Cascade)  
  leadId        String
}


model Wset {
  id            String    @id @default(cuid())
  institute     String
  location      String?
  email         String?
  phone         String?
  website       String?
  imported      Boolean   @default(false)
}

model Indicator {
  id                  String    @id @default(cuid())
  name                String
  description         String?   @db.Text
  type                String    @default("Instagram")
  icon                String    @default("AreaChart")
  order               Int       @default(0)
  reportDefinitions   ReportDefinition[] 
  indicatorReportDefinitions IndicatorReportDefinition[]
  dataIndicators      DataIndicator[]
}

model ReportDefinition {
  id            String    @id @default(cuid())
  name          String
  description   String?   @db.Text
  indicators    Indicator[]
  indicatorReportDefinitions IndicatorReportDefinition[]
  clients       Client[]
}

model IndicatorReportDefinition {
  id                  String    @id @default(cuid())
  indicator           Indicator @relation(fields: [indicatorId], references: [id])
  indicatorId         String
  reportDefinition    ReportDefinition @relation(fields: [reportDefinitionId], references: [id])
  reportDefinitionId  String
}

model Informe {
  id              String    @id @default(cuid())
  name            String
  month           DateTime
  dataIndicators  DataIndicator[]
  client          Client    @relation(fields: [clientId], references: [id], onDelete: Restrict)
  clientId        Int
  notasFacebook   String?   @db.Text
  notasInstagram  String?   @db.Text
  notasLinkedin   String?   @db.Text
  status          String    @default("draft")
}

model DataIndicator {
  id            String    @id @default(cuid())
  indicator     Indicator @relation(fields: [indicatorId], references: [id])
  indicatorId   String
  date          DateTime
  previousValue Float
  value         Float  
  informe       Informe   @relation(fields: [informeId], references: [id], onDelete: Cascade)
  informeId     String
}

model FechaImportante {
  id            String    @id @default(cuid())
  title         String
  date          DateTime
  client        Client?    @relation(fields: [clientId], references: [id], onDelete: Restrict)
  clientId      Int?
}

model Newsletter {
  id            String    @id @default(cuid())
  name          String                      // gennext: show.column
  contentHtml   String?   @db.Text
  contentJson   String?   @db.Text
  createdAt     DateTime  @default(now())   // gennext: show.column skip.zod
  client        Client    @relation(fields: [clientId], references: [id], onDelete: NoAction)
  clientId      Int
  envios        Envio[]
}

model Envio {
  id                  String    @id @default(cuid())
  status              String    @default("draft") // gennext: show.column
  newsletterSubject   String?                     // gennext: show.column
  createdAt           DateTime  @default(now())   // gennext: show.column skip.zod
  startedAt           DateTime?                   // gennext: show.column
  sentByName          String?                     // gennext: show.column
  newsletter          Newsletter @relation(fields: [newsletterId], references: [id], onDelete: NoAction)
  newsletterId        String
  emailFrom           String?                     // gennext: show.column
  emailSubject        String?                     // gennext: show.column
  emails              Email[]
  client        Client    @relation(fields: [clientId], references: [id], onDelete: NoAction)
  clientId      Int
}

model Email {
  id            String    @id @default(cuid())
  status        String    @default("draft")       // gennext: show.column
  createdAt     DateTime  @default(now())         // gennext: skip.zod
  sentAt        DateTime?                         // gennext: show.column skip.zod
  envio         Envio     @relation(fields: [envioId], references: [id], onDelete: NoAction)
  envioId       String
  emailTo       String                            // gennext: show.column
  emailSubject  String                            // gennext: show.column
  client        Client    @relation(fields: [clientId], references: [id], onDelete: NoAction)
  clientId      Int
}

model Contact {
  id            String    @id @default(cuid())
  name          String?       // gennext: show.column
  email         String        // gennext: show.column
  createdAt     DateTime  @default(now()) // gennext: skip.zod
  client        Client    @relation(fields: [clientId], references: [id], onDelete: Restrict)  
  clientId      Int 
}